---
import Layout from "../../layouts/Layout.astro";
import {
  fetchProyectos,
} from "../../utils/db";
import NuevoProyectoForm from  "../../components/NuevoProyectoForm.astro"
const { id } = Astro.params;
const clienteId = Number(id);

// Obtener los datos del cliente
const resCliente = await fetch(Astro.url.origin + `/api/clientes/${clienteId}`);
const cliente = await resCliente.json();

// Obtener los proyectos del cliente
let proyectos = await fetchProyectos(clienteId);
---

<Layout title={`Cliente: ${cliente.razon_social}`}>
  <div class="min-h-screen bg-gray-50">
    <div class="max-w-6xl mx-auto px-6 py-8">
      
      <!-- Header con navegación -->
      <div class="mb-8">
        <a 
          href="/clientes" 
          class="inline-flex items-center gap-2 text-sm text-gray-600 hover:text-gray-900 transition-colors mb-4"
        >
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
          </svg>
          Volver a la lista
        </a>
        <h1 class="text-3xl font-light text-gray-900 tracking-tight">
          {cliente.razon_social}
        </h1>
        <p class="text-gray-600 mt-1">Gestión de proyectos y características</p>
      </div>

      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        
        <!-- Información del Cliente -->
        <div class="lg:col-span-1">
          <div class="bg-white rounded-lg shadow-sm border border-gray-100 p-9 sticky top-[70px]  ">
            <div class="flex items-center gap-3 mb-4">
              <div class="w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center">
                <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"/>
                </svg>
              </div>
              <div>
                <h2 class="text-lg font-medium text-gray-900">Información del Cliente</h2>
                <p class="text-sm text-gray-600">Datos principales</p>
              </div>
            </div>
            
            <div class="space-y-3">
              <div>
                <label class="text-xs font-medium text-gray-500 uppercase tracking-wide">Razón Social</label>
                <p class="text-sm text-gray-900 mt-1">{cliente.razon_social}</p>
              </div>
              <div>
                <label class="text-xs font-medium text-gray-500 uppercase tracking-wide">RUC</label>
                <p class="text-sm text-gray-900 mt-1">{cliente.ruc}</p>
              </div>
              <div>
                <label class="text-xs font-medium text-gray-500 uppercase tracking-wide">Proyectos</label>
                <p class="text-sm text-gray-900 mt-1">{proyectos.length} proyecto{proyectos.length !== 1 ? 's' : ''}</p>
              </div>
            </div>
          </div>
        </div>

        <!-- Contenido Principal -->
        <div class="lg:col-span-2 space-y-8">
          
          <!-- Formulario Nuevo Proyecto -->
            <NuevoProyectoForm clienteId={clienteId} client:load />


          <!-- Lista de Proyectos -->
          <div class="bg-white rounded-lg shadow-sm border border-gray-100">
            <div class="px-6 py-4 border-b border-gray-100">
              <div class="flex items-center gap-2">
                <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
                </svg>
                <h2 class="text-lg font-medium text-gray-900">Proyectos</h2>
              </div>
              <p class="text-sm text-gray-600 mt-1">
                {proyectos.length} proyecto{proyectos.length !== 1 ? 's' : ''} registrado{proyectos.length !== 1 ? 's' : ''}
              </p>
            </div>

            {proyectos.length === 0 ? (
              <div class="text-center py-12">
                <svg class="w-12 h-12 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
                </svg>
                <p class="text-gray-500 mb-1">No hay proyectos registrados</p>
                <p class="text-sm text-gray-400">Crea tu primer proyecto usando el formulario de arriba</p>
              </div>
            ) : (
              <div class="divide-y divide-gray-100">
                {proyectos.map((proyecto) => (
                  <div class="p-6">
                    
                    <!-- Header del Proyecto -->
                    <div class="flex items-start justify-between mb-4">
                      <div class="flex-1 min-w-0">
                        <div class="flex items-center gap-3 mb-2">
                          <h3 class="text-lg font-medium text-gray-900">
                            {proyecto.nombreProyecto}
                          </h3>
                          <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                            proyecto.estado 
                              ? 'bg-green-100 text-green-800' 
                              : 'bg-red-100 text-red-800'
                          }`}>
                            {proyecto.estado ? 'Activo' : 'Inactivo'}
                          </span>
                        </div>
                        {proyecto.observacion && (
                          <p class="text-sm text-gray-600">{proyecto.observacion}</p>
                        )}
                      </div>
                      
                      <div class="flex items-center gap-2 ml-4">
                        <button
                          onclick={`toggleProyecto(${proyecto.id}, ${proyecto.estado})`}
                          class={`px-3 py-1.5 text-xs font-medium rounded-md transition-colors ${
                            proyecto.estado
                              ? 'bg-yellow-100 text-yellow-800 hover:bg-yellow-200'
                              : 'bg-green-100 text-green-800 hover:bg-green-200'
                          }`}
                        >
                          {proyecto.estado ? 'Desactivar' : 'Activar'}
                        </button>
                        <button
                          onclick={`eliminarProyecto(${proyecto.id})`}
                          class="px-3 py-1.5 text-xs font-medium text-red-800 bg-red-100 rounded-md hover:bg-red-200 transition-colors"
                        >
                          Eliminar
                        </button>
                      </div>
                    </div>

                    <!-- Características del Proyecto -->
                    <div class="bg-gray-50 rounded-lg p-4">
                      <div class="flex items-center justify-between mb-3">
                        <h4 class="text-sm font-medium text-gray-900">Características</h4>
                        <button
                          onclick={`crearCaracteristica(${proyecto.id})`}
                          class="inline-flex items-center gap-1 px-3 py-1.5 text-xs font-medium text-gray-700 bg-white border border-gray-200 rounded-md hover:bg-gray-50 transition-colors"
                        >
                          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                          </svg>
                          Añadir
                        </button>
                      </div>

                      {proyecto.detalles.length === 0 ? (
                        <p class="text-sm text-gray-500 text-center py-4">Sin características asignadas</p>
                      ) : (
                        <div class="space-y-2">
                          {proyecto.detalles.map((detalle: { caracteristica: { titulo: unknown; }; estado: any; observacion: unknown; id: any; }) => (
                            <div  class="bg-white rounded-md p-3 border border-gray-200">
                              <div class="flex items-start justify-between">
                                <div class="flex-1 min-w-0">
                                  <div class="flex items-center gap-2 mb-1">
                                    <h5 class="text-sm font-medium text-gray-900">
                                      {detalle.caracteristica.titulo}
                                    </h5>
                                    <span class={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${
                                      detalle.estado 
                                        ? 'bg-green-100 text-green-700' 
                                        : 'bg-red-100 text-red-700'
                                    }`}>
                                      {detalle.estado ? 'Activo' : 'Inactivo'}
                                    </span>
                                  </div>
                                  {detalle.observacion && (
                                    <p class="text-xs text-gray-600">{detalle.observacion}</p>
                                  )}
                                </div>
                                
                                <div class="flex items-center gap-1 ml-3">
                                  <button
                                    onclick={`toggleDetalle(${detalle.id}, ${proyecto.id}, ${detalle.estado})`}
                                    class={`px-2 py-1 text-xs font-medium rounded transition-colors ${
                                      detalle.estado
                                        ? 'text-yellow-700 hover:bg-yellow-100'
                                        : 'text-green-700 hover:bg-green-100'
                                    }`}
                                  >
                                    {detalle.estado ? 'Desactivar' : 'Activar'}
                                  </button>
                                  <button
                                    onclick={`eliminarDetalle(${detalle.id}, ${proyecto.id})`}
                                    class="px-2 py-1 text-xs font-medium text-red-700 hover:bg-red-100 rounded transition-colors"
                                  >
                                    <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                                    </svg>
                                  </button>
                                </div>
                              </div>
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  </div>

  <script type="module">
    // Crear nuevo proyecto
    document.getElementById('nuevoProyectoForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      
      try {
        const response = await fetch('/api/proyectos', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            clienteId: {clienteId},
            nombreProyecto: formData.get('nombreProyecto'),
            observacion: formData.get('observacion')
          })
        });
        
        if (response.ok) {
          location.reload();
        } else {
          alert('Error al crear el proyecto');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error al crear el proyecto');
      }
    });

    // Toggle estado proyecto
    window.toggleProyecto = async (proyectoId, estadoActual) => {
      try {
        const response = await fetch(`/api/proyectos/${proyectoId}/toggle`, {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ estado: !estadoActual })
        });
        
        if (response.ok) {
          location.reload();
        } else {
          alert('Error al cambiar el estado del proyecto');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error al cambiar el estado del proyecto');
      }
    };

    // Eliminar proyecto
    window.eliminarProyecto = async (proyectoId) => {
      if (!confirm('¿Está seguro de eliminar este proyecto y todas sus características?')) return;
      
      try {
        const response = await fetch(`/api/proyectos/${proyectoId}`, {
          method: 'DELETE'
        });
        
        if (response.ok) {
          location.reload();
        } else {
          alert('Error al eliminar el proyecto');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error al eliminar el proyecto');
      }
    };

    // Crear característica
    window.crearCaracteristica = async (proyectoId) => {
      const caracteristicaId = prompt('ID de la característica:');
      if (!caracteristicaId || isNaN(Number(caracteristicaId))) return;
      
      const observacion = prompt('Observación (opcional):') || '';
      
      try {
        const response = await fetch('/api/detalles', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            proyectoId: proyectoId,
            caracteristicas_ecommerceid: Number(caracteristicaId),
            observacion: observacion
          })
        });
        
        if (response.ok) {
          location.reload();
        } else {
          alert('Error al crear la característica');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error al crear la característica');
      }
    };

    // Toggle estado detalle
    window.toggleDetalle = async (detalleId, proyectoId, estadoActual) => {
      try {
        const response = await fetch(`/api/detalles/${detalleId}/toggle`, {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ estado: !estadoActual })
        });
        
        if (response.ok) {
          location.reload();
        } else {
          alert('Error al cambiar el estado de la característica');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error al cambiar el estado de la característica');
      }
    };

    // Eliminar detalle
    window.eliminarDetalle = async (detalleId, proyectoId) => {
      if (!confirm('¿Está seguro de eliminar esta característica?')) return;
      
      try {
        const response = await fetch(`/api/detalles/${detalleId}`, {
          method: 'DELETE'
        });
        
        if (response.ok) {
          location.reload();
        } else {
          alert('Error al eliminar la característica');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error al eliminar la característica');
      }
    };
  </script>
</Layout>