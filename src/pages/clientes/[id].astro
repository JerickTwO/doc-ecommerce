---
import Layout from "../../layouts/Layout.astro"
import ProyectoCard from "../../components/ProyectoCard.astro";
import { getClienteById,getProyectosByCliente} from '../../utils/clientStore';
import NuevoProyectoForm from "../../components/NuevoProyectoForm.astro"
const { id } = Astro.params;
if (!id) {
  throw new Error("Cliente ID is required");
}
const cliente = await getClienteById(id);
const clienteId = cliente?.id
const proyectos = await getProyectosByCliente(id);
---

  <Layout title={`Cliente: ${cliente.razon_social}`}>
    <div class="min-h-screen bg-gray-50">
      <div class="max-w-6xl mx-auto px-6 py-8">
        
        <!-- Header con navegación -->
        <div class="mb-8">
          <a 
            href="/clientes" 
            class="inline-flex items-center gap-2 text-sm text-gray-600 hover:text-gray-900 transition-colors mb-4"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
            </svg>
            Volver a la lista
          </a>
          <h1 class="text-3xl font-light text-gray-900 tracking-tight">
            {cliente.razon_social}
          </h1>
          <p class="text-gray-600 mt-1">Gestión de proyectos y características</p>
        </div>

      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        
        <!-- Información del Cliente -->
        <div class="lg:col-span-1">
          <div class="bg-white rounded-lg shadow-sm border border-gray-100 p-9 sticky top-[70px]  ">
            <div class="flex items-center gap-3 mb-4">
              <div class="w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center">
                <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"/>
                </svg>
              </div>
              <div>
                <h2 class="text-lg font-medium text-gray-900">Información del Cliente</h2>
                <p class="text-sm text-gray-600">Datos principales</p>
              </div>
            </div>
            
            <div class="space-y-3">
              <div>
                <label class="text-xs font-medium text-gray-500 uppercase tracking-wide">Razón Social</label>
                <p class="text-sm text-gray-900 mt-1">{cliente.razon_social}</p>
              </div>
              <div>
                <label class="text-xs font-medium text-gray-500 uppercase tracking-wide">RUC</label>
                <p class="text-sm text-gray-900 mt-1">{cliente.ruc}</p>
              </div>
              <div>
                <label class="text-xs font-medium text-gray-500 uppercase tracking-wide">Proyectos</label>
                <p class="text-sm text-gray-900 mt-1">{proyectos.length} proyecto{proyectos.length !== 1 ? 's' : ''}</p>
              </div>
            </div>
          </div>
        </div>

        <!-- Contenido Principal -->
        <div class="lg:col-span-2 space-y-8">
          
          <!-- Formulario Nuevo Proyecto -->
            <NuevoProyectoForm clienteId={clienteId} client:load />


          <!-- Lista de Proyectos -->
          <div class="bg-white rounded-lg shadow-sm border border-gray-100">
            <div class="px-6 py-4 border-b border-gray-100">
              <div class="flex items-center gap-2">
                <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
                </svg>
                <h2 class="text-lg font-medium text-gray-900">Proyectos</h2>
              </div>
              <p class="text-sm text-gray-600 mt-1">
                {proyectos.length} proyecto{proyectos.length !== 1 ? 's' : ''} registrado{proyectos.length !== 1 ? 's' : ''}
              </p>
            </div>

            {proyectos.length === 0 ? (
              <div class="text-center py-12">
                <svg class="w-12 h-12 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
                </svg>
                <p class="text-gray-500 mb-1">No hay proyectos registrados</p>
                <p class="text-sm text-gray-400">Crea tu primer proyecto usando el formulario de arriba</p>
              </div>
            ) : (
              <div class="divide-y divide-gray-100">
                {proyectos.map((proyecto) => (
                  <ProyectoCard proyecto={proyecto} />
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  </div>
  </Layout>

  <script type="module">
    // Crear nuevo proyecto
    document.getElementById('nuevoProyectoForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      
      try {
        const response = await fetch('/api/proyectos', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            clienteId: {clienteId},
            nombreProyecto: formData.get('nombreProyecto'),
            observacion: formData.get('observacion')
          })
        });
        
        if (response.ok) {
          location.reload();
        } else {
          alert('Error al crear el proyecto');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error al crear el proyecto');
      }
    });

    // Toggle estado proyecto
    window.toggleProyecto = async (proyectoId, estadoActual) => {
      try {
        const response = await fetch(`/api/proyectos/${proyectoId}/toggle`, {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ estado: !estadoActual })
        });
        
        if (response.ok) {
          location.reload();
        } else {
          alert('Error al cambiar el estado del proyecto');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error al cambiar el estado del proyecto');
      }
    };

    // Eliminar proyecto
    window.eliminarProyecto = async (proyectoId) => {
      if (!confirm('¿Está seguro de eliminar este proyecto y todas sus características?')) return;
      
      try {
        const response = await fetch(`/api/proyectos/${proyectoId}`, {
          method: 'DELETE'
        });
        
        if (response.ok) {
          location.reload();
        } else {
          alert('Error al eliminar el proyecto');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error al eliminar el proyecto');
      }
    };

    // Crear característica
    window.crearCaracteristica = async (proyectoId) => {
      const caracteristicaId = prompt('ID de la característica:');
      if (!caracteristicaId || isNaN(Number(caracteristicaId))) return;
      
      const observacion = prompt('Observación (opcional):') || '';
      
      try {
        const response = await fetch('/api/detalles', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            proyectoId: proyectoId,
            caracteristicas_ecommerceid: Number(caracteristicaId),
            observacion: observacion
          })
        });
        
        if (response.ok) {
          location.reload();
        } else {
          alert('Error al crear la característica');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error al crear la característica');
      }
    };

    // Toggle estado detalle
    window.toggleDetalle = async (detalleId, proyectoId, estadoActual) => {
      try {
        const response = await fetch(`/api/detalles/${detalleId}/toggle`, {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ estado: !estadoActual })
        });
        
        if (response.ok) {
          location.reload();
        } else {
          alert('Error al cambiar el estado de la característica');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error al cambiar el estado de la característica');
      }
    };

    // Eliminar detalle
    window.eliminarDetalle = async (detalleId, proyectoId) => {
      if (!confirm('¿Está seguro de eliminar esta característica?')) return;
      
      try {
        const response = await fetch(`/api/detalles/${detalleId}`, {
          method: 'DELETE'
        });
        
        if (response.ok) {
          location.reload();
        } else {
          alert('Error al eliminar la característica');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error al eliminar la característica');
      }
  </script>