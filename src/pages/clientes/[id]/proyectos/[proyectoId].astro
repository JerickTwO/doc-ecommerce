---
import Layout from "../../../../layouts/Layout.astro";
import { getProyectoConDetalles } from "../../../../utils/proyectos-clientes";
import { getClienteById } from "../../../../utils/clientStore";
import AddCaracteristicaForm from "../../../../components/AddCaracteristicaForm.astro";
const { id: clienteId, proyectoId } = Astro.params;

const cliente = await getClienteById(clienteId ?? "");

const proyecto = await getProyectoConDetalles(proyectoId ?? "");

if (!proyecto) {
  throw new Error("Proyecto no encontrado");
}
---

<Layout title={`Proyecto: ${proyecto.nombre_proyecto}`}>
  <div class="min-h-screen bg-gray-50">
    <div class="max-w-6xl mx-auto px-6 py-8">
      <div class="mb-6">
        <a
          href={`/clientes/${clienteId}`}
          class="text-sm text-gray-600 hover:text-gray-900 flex items-center gap-1"
        >
          <svg
            class="w-4 h-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M15 19l-7-7 7-7"></path>
          </svg>Volver al Proyecto
        </a>
      </div>
      <header class="info-header w-full flex items-center justify-between mb-8">
        <!-- Project Header -->
        <div class="info-header--text">
          <h1 class="text-3xl font-light text-gray-900 tracking-tight">
            {proyecto.nombre_proyecto}
          </h1>
          <p class="text-sm text-gray-600 mb-1">
            Gestión de proyectos y características
          </p>
        </div>

        <span
          class={`inline-block px-3 py-1 rounded-full text-xs font-medium ${
            proyecto.estado
              ? "bg-green-100 text-green-800"
              : "bg-red-100 text-red-800"
          }`}
        >
          {proyecto.estado ? "Activo" : "Inactivo"}
        </span>
      </header>

      <!-- Add Characteristic Form -->
      <AddCaracteristicaForm
        proyectoId={proyectoId ?? ""}
        onSaved="refrescarDetalles"
      />

      <!-- Characteristics List -->
      <div class="bg-white border border-gray-200 rounded-lg">
        <!-- List Header -->
        <div class="px-6 py-4 border-b border-gray-200">
          <div class="flex items-center justify-between">
            <div class="flex items-center gap-3">
              <svg
                class="w-5 h-5 text-gray-600"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"
                ></path>
              </svg>
              <h2 class="text-lg font-medium text-gray-900">
                Características Asignadas
              </h2>
            </div>
            <span class="text-sm text-gray-600">
              {proyecto.detalles?.length ?? 0} características
            </span>
          </div>
        </div>

        <!-- List Content -->
        <div class="p-6">
          {
            (proyecto.detalles?.length ?? 0) === 0 ? (
              <div class="text-center py-12">
                <svg
                  class="w-12 h-12 text-gray-400 mx-auto mb-4"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 0 012 2"
                  />
                </svg>
                <p class="text-gray-600 text-sm">
                  Sin características asignadas
                </p>
              </div>
            ) : (
              <div class="space-y-4">
                {proyecto.detalles.map((d) => (
                  <div class="flex items-start justify-between p-4 border border-gray-200 rounded-lg hover:bg-gray-50">
                    <div class="flex items-start gap-3 flex-1">
                      <svg
                        class="w-5 h-5 text-gray-400 mt-0.5 flex-shrink-0"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 0 012 2"
                        />
                      </svg>
                      <div class="flex-1 min-w-0">
                        <h3 class="font-medium text-gray-900 mb-1">
                          {d.caracteristica.titulo}
                        </h3>
                        {d.observacion && (
                          <p class="text-sm text-gray-600">{d.observacion}</p>
                        )}
                      </div>
                    </div>

                    <div class="flex items-center gap-3 flex-shrink-0 ml-4">
                      <span
                        class={`inline-block px-3 py-1 rounded-full text-xs font-medium ${
                          d.estado
                            ? "bg-green-100 text-green-800"
                            : "bg-red-100 text-red-800"
                        }`}
                      >
                        {d.estado ? "Activo" : "Inactivo"}
                      </span>

                      <button
                        type="button"
                        data-detalle-id={d.id}
                        class="text-gray-400 hover:text-red-600 p-1"
                        title="Eliminar característica"
                      >
                        <svg
                          class="w-4 h-4"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
                          />
                        </svg>
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )
          }
        </div>
      </div>
    </div>
  </div>
</Layout>

<script is:inline define:vars={{ proyectoId }}>
  (() => {
    // Función global para refrescar página
    window.refrescarDetalles = function () {
      location.reload();
    };

    // Esperar a que el DOM esté listo
    document.addEventListener("DOMContentLoaded", function () {
      // Buscar el formulario
      const form = document.querySelector("form[data-add-caracteristica]");
      if (!form) return;

      const selBox = form.querySelector(
        'select[name="caracteristicas_ecommerceid"]'
      );
      if (!selBox) return;

      /* ───────────────── 1. Cargar opciones ───────────────── */
      fetch("/api/caracteristicas?estado=1")
        .then((r) => r.json())
        .then((list) => {
          // Limpiar opciones existentes (excepto la primera)
          selBox.innerHTML =
            '<option value="">-- Seleccionar característica --</option>';

          list.forEach((c) => {
            const opt = document.createElement("option");
            opt.value = c.id;
            opt.textContent = c.titulo;
            selBox.appendChild(opt);
          });
        })
        .catch((err) => {
          console.error("Error cargando características:", err);
        });

      /* ───────────────── 2. Submit ───────────────── */
      form.addEventListener("submit", async (e) => {
        e.preventDefault();
        const data = Object.fromEntries(new FormData(form));

        let caracId = data.caracteristicas_ecommerceid;

        try {
          /* 2.1 crea característica nueva si es necesario */
          if (!caracId && data.tituloNuevo?.trim()) {
            const resCar = await fetch("/api/caracteristicas", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                titulo: data.tituloNuevo.trim(),
                descripcion: "",
              }),
            });

            if (!resCar.ok) {
              const error = await resCar.json();
              throw new Error(error.error || "Error al crear característica");
            }

            const nueva = await resCar.json();
            caracId = nueva.id;
          }

          if (!caracId) {
            throw new Error(
              "Selecciona una característica existente o escribe el nombre de una nueva"
            );
          }

          /* 2.2 enlace proyecto-característica */
          const detallePayload = {
            proyectoId: proyectoId,
            caracteristicas_ecommerceid: Number(caracId),
            observacion: data.observacion || "",
          };

          const resDet = await fetch("/api/detalles", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(detallePayload),
          });

          if (!resDet.ok) {
            const error = await resDet.json();
            throw new Error(error.error || "Error al vincular característica");
          }

          // Éxito
          form.reset();

          // Mostrar mensaje de éxito
          if (typeof window.mostrarMensaje === "function") {
            window.mostrarMensaje(
              "Característica agregada correctamente",
              "success"
            );
          }

          // Refrescar datos
          setTimeout(() => {
            window.refrescarDetalles?.();
          }, 100);
        } catch (error) {
          console.error("Error:", error);

          // Mostrar mensaje de error
          if (typeof window.mostrarMensaje === "function") {
            window.mostrarMensaje(error.message, "error");
          } else {
            alert(error.message);
          }
        }
      });

      /* ───────────────── 3. Eliminar características ───────────────── */
      document.addEventListener("click", async (e) => {
        const botonEliminar = e.target.closest("[data-detalle-id]");
        if (!botonEliminar) return;

        if (
          !confirm(
            "¿Estás seguro de que quieres eliminar esta característica del proyecto?"
          )
        ) {
          return;
        }

        try {
          const detalleId = botonEliminar.getAttribute("data-detalle-id");
          const response = await fetch(`/api/detalles?id=${detalleId}`, {
            method: "DELETE",
          });

          if (!response.ok) {
            const error = await response.json();
            throw new Error(error.error || "Error al eliminar característica");
          }

          // Mostrar mensaje de éxito
          if (typeof window.mostrarMensaje === "function") {
            window.mostrarMensaje(
              "Característica eliminada correctamente",
              "success"
            );
          }

          // Refrescar página
          setTimeout(() => {
            window.refrescarDetalles?.();
          }, 100);
        } catch (error) {
          console.error("Error:", error);

          if (typeof window.mostrarMensaje === "function") {
            window.mostrarMensaje(error.message, "error");
          } else {
            alert(error.message);
          }
        }
      });
    });
  })();
</script>
