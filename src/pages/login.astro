---
import Layout from "../layouts/Layout.astro";
import { verifyToken } from "../utils/auth";

// Forzar server-side rendering para esta página
export const prerender = false;

// Si el usuario ya está logueado, redirigir al dashboard
const token = Astro.cookies.get("auth-token")?.value;
if (token) {
  const user = verifyToken(token);
  if (user) {
    return Astro.redirect("/dashboard");
  }
}
---

<Layout title="Login - Perseo Ecommerce">
  <div class="items-center h-screen bg-gray-50 flex flex-col justify-center sm:px-6 lg:px-8">
    <div class="sm:mx-auto sm:w-full sm:max-w-md">
      <div class="text-center">
        <h2 class=" text-3xl font-extrabold text-gray-900">
          Iniciar Sesión
        </h2>
        <p class=" text-sm text-gray-600">
          Acceso a Información Privada | Perseo Ecommerce
        </p>
      </div>
    </div>

    <div class="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
      <div class="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
        <!-- Mensajes de error/éxito -->
        <div id="message" class="hidden mb-4 p-4 rounded-md">
          <p id="message-text" class="text-sm font-medium"></p>
        </div>

        <!-- Formulario de Login -->
        <form id="loginForm" class="space-y-6">
          <div>
            <label
              for="identifier"
              class="block text-sm font-medium text-gray-700"
            >
              Email o Usuario
            </label>
            <div class="mt-1">
              <input
                id="identifier"
                name="identifier"
                type="text"
                required
                class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                placeholder="email@example.com"
              />
            </div>
          </div>

          <div>
            <label
              for="password"
              class="block text-sm font-medium text-gray-700"
            >
              Contraseña
            </label>
            <div class="mt-1 relative">
              <input
                id="password"
                name="password"
                type="password"
                required
                class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm pr-10"
                placeholder="Contraseña"
              />
              <button
                type="button"
                id="togglePassword"
                class="absolute inset-y-0 right-0 pr-3 flex items-center"
              >
                <svg
                  id="eyeIcon"
                  class="h-5 w-5 text-gray-400"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
                  ></path>
                </svg>
              </button>
            </div>
          </div>

          <div>
            <button
              type="submit"
              id="submitBtn"
              class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span id="submitText">Iniciar Sesión</span>
              <svg
                id="loadingSpinner"
                class="hidden animate-spin -mr-1 ml-3 h-5 w-5 text-white"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
              >
                <circle
                  class="opacity-25"
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  stroke-width="4"></circle>
                <path
                  class="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                ></path>
              </svg>
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</Layout>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const form = document.getElementById("loginForm") as HTMLFormElement;
    const submitBtn = document.getElementById("submitBtn") as HTMLButtonElement;
    const submitText = document.getElementById("submitText") as HTMLSpanElement;
    const loadingSpinner = document.getElementById(
      "loadingSpinner"
    ) as HTMLElement;
    const messageDiv = document.getElementById("message") as HTMLDivElement;
    const messageText = document.getElementById(
      "message-text"
    ) as HTMLParagraphElement;
    const togglePassword = document.getElementById(
      "togglePassword"
    ) as HTMLButtonElement;
    const passwordInput = document.getElementById(
      "password"
    ) as HTMLInputElement;

    // Toggle password visibility
    togglePassword.addEventListener("click", function () {
      const type =
        passwordInput.getAttribute("type") === "password" ? "text" : "password";
      passwordInput.setAttribute("type", type);
    });

    // Función para mostrar mensajes
    function showMessage(message: string, isError: boolean = false) {
      messageDiv.className = `mb-4 p-4 rounded-md ${isError ? "bg-red-50 border border-red-200" : "bg-green-50 border border-green-200"}`;
      messageText.className = `text-sm font-medium ${isError ? "text-red-800" : "text-green-800"}`;
      messageText.textContent = message;
      messageDiv.classList.remove("hidden");
    }

    // Función para ocultar mensajes
    function hideMessage() {
      messageDiv.classList.add("hidden");
    }

    // Handle form submission
    form.addEventListener("submit", async function (e) {
      e.preventDefault();

      hideMessage();

      // Disable button and show loading
      submitBtn.disabled = true;
      submitText.textContent = "Iniciando sesión...";
      loadingSpinner.classList.remove("hidden");

      const formData = new FormData(form);
      const data = {
        identifier: formData.get("identifier") as string,
        password: formData.get("password") as string,
      };

      try {
        const response = await fetch("/api/auth/login", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data),
        });

        const result = await response.json();

        if (result.success) {
          showMessage("¡Login exitoso! Redirigiendo...", false);
          setTimeout(() => {
            window.location.href = "/dashboard";
          }, 10);
        } else {
          showMessage(result.message, true);
        }
      } catch (error) {
        console.error("Error:", error);
        showMessage("Error de conexión. Inténtalo de nuevo.", true);
      } finally {
        // Re-enable button and hide loading
        submitBtn.disabled = false;
        submitText.textContent = "Iniciar Sesión";
        loadingSpinner.classList.add("hidden");
      }
    });
  });
</script>
