/* empty css                                                     */
import { c as createAstro, a as createComponent, e as renderTemplate, h as defineScriptVars, f as addAttribute, m as maybeRenderHead, d as renderComponent } from '../../../../chunks/astro/server_BTInrGQy.mjs';
import 'kleur/colors';
import { $ as $$Layout } from '../../../../chunks/Layout_3tWj6AhR.mjs';
import { a as getProyectoConDetalles } from '../../../../chunks/proyectos-clientes_ygp9IoGm.mjs';
import { a as getClienteById } from '../../../../chunks/clientStore_BLAaA3MI.mjs';
import 'clsx';
import { p as pool } from '../../../../chunks/db_Kpg-XkaI.mjs';
export { renderers } from '../../../../renderers.mjs';

var __freeze$1 = Object.freeze;
var __defProp$1 = Object.defineProperty;
var __template$1 = (cooked, raw) => __freeze$1(__defProp$1(cooked, "raw", { value: __freeze$1(raw || cooked.slice()) }));
var _a$1;
const $$Astro$1 = createAstro("https://docs.perseo.com");
const $$AddCaracteristicaForm = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$1, $$props, $$slots);
  Astro2.self = $$AddCaracteristicaForm;
  let caracteristicas = [];
  try {
    caracteristicas = await pool.query(
      `SELECT id, titulo
       FROM vw_caracteristicas_mostrables`
    );
  } catch (err) {
    console.error("\u274C No se pudieron cargar las caracter\xEDsticas", err);
  }
  const { proyectoId, onSaved } = Astro2.props;
  return renderTemplate(_a$1 || (_a$1 = __template$1(["", '<div class="bg-white border border-gray-200 rounded-lg mb-8"> <!-- Header --> <div class="px-6 py-4 border-b border-gray-200"> <div class="flex items-center gap-3"> <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path> </svg> <h3 class="text-lg font-medium text-gray-900">Nuevo Caracter\xEDstica</h3> </div> <p class="text-sm text-gray-600 mt-1">\nAgrega una nueva caracter\xEDstica al proyecto\n</p> </div> <!-- Form Content --> <div class="p-6"> <form data-add-caracteristica class="space-y-6"> <!-- Selection Options --> <div class="grid grid-cols-1 lg:grid-cols-2 gap-6"> <!-- Existing Characteristic --> <div> <label for="caracteristicas_ecommerceid" class="block text-sm font-medium text-gray-700 mb-2">\nSeleccionar caracter\xEDstica existente\n</label> <select name="caracteristicas_ecommerceid" id="caracteristicas_ecommerceid" class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-1 focus:ring-gray-500 focus:border-gray-500"> <option value="">-- Seleccionar caracter\xEDstica --</option> ', ` </select> </div> <!-- New Characteristic --> <div> <label for="tituloNuevo" class="block text-sm font-medium text-gray-700 mb-2">
O crear nueva caracter\xEDstica
</label> <input type="text" name="tituloNuevo" id="tituloNuevo" placeholder="Nombre de la nueva caracter\xEDstica" class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-1 focus:ring-gray-500 focus:border-gray-500"> </div> </div> <!-- Observation --> <div> <label for="observacion" class="block text-sm font-medium text-gray-700 mb-2">
Observaci\xF3n (opcional)
</label> <textarea name="observacion" id="observacion" rows="3" placeholder="Observaciones adicionales..." class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-1 focus:ring-gray-500 focus:border-gray-500 resize-none"></textarea> </div> <!-- Action Buttons --> <div class="flex gap-3 pt-2"> <button type="button" onclick="document.querySelector('[data-add-caracteristica]').reset()" class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-1 focus:ring-gray-500">
Limpiar
</button> <button type="submit" class="px-4 py-2 text-sm font-medium text-white bg-gray-900 border border-transparent rounded-md hover:bg-gray-800 focus:outline-none focus:ring-1 focus:ring-gray-500">
+ Crear Caracter\xEDstica
</button> </div> </form> <!-- Status Message --> <div id="mensaje-estado" class="mt-6 hidden"> <div class="p-3 rounded-md text-sm"> <span class="mensaje-texto"></span> </div> </div> </div> </div> <script>(function(){`, '\n  // Esta funci\xF3n se ejecutar\xE1 cuando el componente se hidrate\n  window.refrescarDetalles = function () {\n    if (onSaved === "refrescarDetalles") {\n      location.reload();\n    }\n  };\n\n  // Funci\xF3n para mostrar mensajes\n  function mostrarMensaje(texto, tipo = "success") {\n    const mensajeDiv = document.getElementById("mensaje-estado");\n    const contenido = mensajeDiv.querySelector("div");\n    const textoSpan = contenido.querySelector(".mensaje-texto");\n\n    textoSpan.textContent = texto;\n\n    if (tipo === "success") {\n      contenido.className =\n        "p-3 rounded-md text-sm bg-green-50 text-green-800 border border-green-200";\n    } else {\n      contenido.className =\n        "p-3 rounded-md text-sm bg-red-50 text-red-800 border border-red-200";\n    }\n\n    mensajeDiv.classList.remove("hidden");\n\n    // Ocultar despu\xE9s de 5 segundos\n    setTimeout(() => {\n      mensajeDiv.classList.add("hidden");\n    }, 100);\n  }\n\n  // Hacer la funci\xF3n global\n  window.mostrarMensaje = mostrarMensaje;\n\n  // Limpiar inputs cuando se selecciona una opci\xF3n\n  document.addEventListener("DOMContentLoaded", () => {\n    const selectCarac = document.getElementById("caracteristicas_ecommerceid");\n    const inputNuevo = document.getElementById("tituloNuevo");\n\n    selectCarac?.addEventListener("change", () => {\n      if (selectCarac.value) {\n        inputNuevo.value = "";\n      }\n    });\n\n    inputNuevo?.addEventListener("input", () => {\n      if (inputNuevo.value.trim()) {\n        selectCarac.value = "";\n      }\n    });\n  });\n  window.cambiarEstadoDetalle = async (detalleId, nuevoEstado) => {\n    try {\n      const response = await fetch(`/api/detalles/${detalleId}/estado`, {\n        method: "PATCH",\n        headers: { "Content-Type": "application/json" },\n        body: JSON.stringify({ estado: Number(nuevoEstado) }),\n      });\n\n      if (response.ok) {\n        location.reload();\n      } else {\n        alert("Error al cambiar el estado de la caracter\xEDstica");\n      }\n    } catch (error) {\n      console.error("Error:", error);\n      alert("Error al cambiar el estado de la caracter\xEDstica");\n    }\n  };\n})();<\/script>'], ["", '<div class="bg-white border border-gray-200 rounded-lg mb-8"> <!-- Header --> <div class="px-6 py-4 border-b border-gray-200"> <div class="flex items-center gap-3"> <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path> </svg> <h3 class="text-lg font-medium text-gray-900">Nuevo Caracter\xEDstica</h3> </div> <p class="text-sm text-gray-600 mt-1">\nAgrega una nueva caracter\xEDstica al proyecto\n</p> </div> <!-- Form Content --> <div class="p-6"> <form data-add-caracteristica class="space-y-6"> <!-- Selection Options --> <div class="grid grid-cols-1 lg:grid-cols-2 gap-6"> <!-- Existing Characteristic --> <div> <label for="caracteristicas_ecommerceid" class="block text-sm font-medium text-gray-700 mb-2">\nSeleccionar caracter\xEDstica existente\n</label> <select name="caracteristicas_ecommerceid" id="caracteristicas_ecommerceid" class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-1 focus:ring-gray-500 focus:border-gray-500"> <option value="">-- Seleccionar caracter\xEDstica --</option> ', ` </select> </div> <!-- New Characteristic --> <div> <label for="tituloNuevo" class="block text-sm font-medium text-gray-700 mb-2">
O crear nueva caracter\xEDstica
</label> <input type="text" name="tituloNuevo" id="tituloNuevo" placeholder="Nombre de la nueva caracter\xEDstica" class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-1 focus:ring-gray-500 focus:border-gray-500"> </div> </div> <!-- Observation --> <div> <label for="observacion" class="block text-sm font-medium text-gray-700 mb-2">
Observaci\xF3n (opcional)
</label> <textarea name="observacion" id="observacion" rows="3" placeholder="Observaciones adicionales..." class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-1 focus:ring-gray-500 focus:border-gray-500 resize-none"></textarea> </div> <!-- Action Buttons --> <div class="flex gap-3 pt-2"> <button type="button" onclick="document.querySelector('[data-add-caracteristica]').reset()" class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-1 focus:ring-gray-500">
Limpiar
</button> <button type="submit" class="px-4 py-2 text-sm font-medium text-white bg-gray-900 border border-transparent rounded-md hover:bg-gray-800 focus:outline-none focus:ring-1 focus:ring-gray-500">
+ Crear Caracter\xEDstica
</button> </div> </form> <!-- Status Message --> <div id="mensaje-estado" class="mt-6 hidden"> <div class="p-3 rounded-md text-sm"> <span class="mensaje-texto"></span> </div> </div> </div> </div> <script>(function(){`, '\n  // Esta funci\xF3n se ejecutar\xE1 cuando el componente se hidrate\n  window.refrescarDetalles = function () {\n    if (onSaved === "refrescarDetalles") {\n      location.reload();\n    }\n  };\n\n  // Funci\xF3n para mostrar mensajes\n  function mostrarMensaje(texto, tipo = "success") {\n    const mensajeDiv = document.getElementById("mensaje-estado");\n    const contenido = mensajeDiv.querySelector("div");\n    const textoSpan = contenido.querySelector(".mensaje-texto");\n\n    textoSpan.textContent = texto;\n\n    if (tipo === "success") {\n      contenido.className =\n        "p-3 rounded-md text-sm bg-green-50 text-green-800 border border-green-200";\n    } else {\n      contenido.className =\n        "p-3 rounded-md text-sm bg-red-50 text-red-800 border border-red-200";\n    }\n\n    mensajeDiv.classList.remove("hidden");\n\n    // Ocultar despu\xE9s de 5 segundos\n    setTimeout(() => {\n      mensajeDiv.classList.add("hidden");\n    }, 100);\n  }\n\n  // Hacer la funci\xF3n global\n  window.mostrarMensaje = mostrarMensaje;\n\n  // Limpiar inputs cuando se selecciona una opci\xF3n\n  document.addEventListener("DOMContentLoaded", () => {\n    const selectCarac = document.getElementById("caracteristicas_ecommerceid");\n    const inputNuevo = document.getElementById("tituloNuevo");\n\n    selectCarac?.addEventListener("change", () => {\n      if (selectCarac.value) {\n        inputNuevo.value = "";\n      }\n    });\n\n    inputNuevo?.addEventListener("input", () => {\n      if (inputNuevo.value.trim()) {\n        selectCarac.value = "";\n      }\n    });\n  });\n  window.cambiarEstadoDetalle = async (detalleId, nuevoEstado) => {\n    try {\n      const response = await fetch(\\`/api/detalles/\\${detalleId}/estado\\`, {\n        method: "PATCH",\n        headers: { "Content-Type": "application/json" },\n        body: JSON.stringify({ estado: Number(nuevoEstado) }),\n      });\n\n      if (response.ok) {\n        location.reload();\n      } else {\n        alert("Error al cambiar el estado de la caracter\xEDstica");\n      }\n    } catch (error) {\n      console.error("Error:", error);\n      alert("Error al cambiar el estado de la caracter\xEDstica");\n    }\n  };\n})();<\/script>'])), maybeRenderHead(), caracteristicas.map((c) => (
    // Muestra ⭐ en las generales; quítalo si no lo quieres
    renderTemplate`<option${addAttribute(c.id, "value")}> ${c.es_general ? "\u2B50 " : ""} ${c.titulo} </option>`
  )), defineScriptVars({ proyectoId, onSaved }));
}, "C:/Users/Jerick/DEV/AstroJS/doc-ecommerce/src/components/AddCaracteristicaForm.astro", void 0);

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Astro = createAstro("https://docs.perseo.com");
const $$proyectoId = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$proyectoId;
  const { id: clienteId, proyectoId } = Astro2.params;
  await getClienteById(clienteId ?? "");
  const proyecto = await getProyectoConDetalles(proyectoId ?? "");
  if (!proyecto) {
    throw new Error("Proyecto no encontrado");
  }
  return renderTemplate(_a || (_a = __template(["", " <script>(function(){", '\n  (() => {\n    // Funci\xF3n global para refrescar p\xE1gina\n    window.refrescarDetalles = function () {\n      location.reload();\n    };\n\n    // Esperar a que el DOM est\xE9 listo\n    document.addEventListener("DOMContentLoaded", function () {\n      // Buscar el formulario\n      const form = document.querySelector("form[data-add-caracteristica]");\n      if (!form) return;\n\n      const selBox = form.querySelector(\n        \'select[name="caracteristicas_ecommerceid"]\'\n      );\n      if (!selBox) return;\n\n      /* \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 1. Cargar opciones \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 */\n      fetch("/api/caracteristicas?estado=1")\n        .then((r) => r.json())\n        .then((list) => {\n          // Limpiar opciones existentes (excepto la primera)\n          selBox.innerHTML =\n            \'<option value="">-- Seleccionar caracter\xEDstica --</option>\';\n\n          list.forEach((c) => {\n            const opt = document.createElement("option");\n            opt.value = c.id;\n            opt.textContent = c.titulo;\n            selBox.appendChild(opt);\n          });\n        })\n        .catch((err) => {\n          console.error("Error cargando caracter\xEDsticas:", err);\n        });\n\n      /* \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 2. Submit \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 */\n      form.addEventListener("submit", async (e) => {\n        e.preventDefault();\n        const data = Object.fromEntries(new FormData(form));\n\n        let caracId = data.caracteristicas_ecommerceid;\n\n        try {\n          /* 2.1 crea caracter\xEDstica nueva si es necesario */\n          if (!caracId && data.tituloNuevo?.trim()) {\n            const resCar = await fetch("/api/caracteristicas", {\n              method: "POST",\n              headers: { "Content-Type": "application/json" },\n              body: JSON.stringify({\n                titulo: data.tituloNuevo.trim(),\n                descripcion: "",\n              }),\n            });\n\n            if (!resCar.ok) {\n              const error = await resCar.json();\n              throw new Error(error.error || "Error al crear caracter\xEDstica");\n            }\n\n            const nueva = await resCar.json();\n            caracId = nueva.id;\n          }\n\n          if (!caracId) {\n            throw new Error(\n              "Selecciona una caracter\xEDstica existente o escribe el nombre de una nueva"\n            );\n          }\n\n          /* 2.2 enlace proyecto-caracter\xEDstica */\n          const detallePayload = {\n            proyectoId: proyectoId,\n            caracteristicas_ecommerceid: Number(caracId),\n            observacion: data.observacion || "",\n          };\n\n          const resDet = await fetch("/api/detalles", {\n            method: "POST",\n            headers: { "Content-Type": "application/json" },\n            body: JSON.stringify(detallePayload),\n          });\n\n          if (!resDet.ok) {\n            const error = await resDet.json();\n            throw new Error(error.error || "Error al vincular caracter\xEDstica");\n          }\n\n          form.reset();\n\n          setTimeout(() => {\n            window.refrescarDetalles?.();\n          }, 100);\n        } catch (error) {\n          console.error("Error:", error);\n\n          if (typeof window.mostrarMensaje === "function") {\n            window.mostrarMensaje(error.message, "error");\n          } else {\n            alert(error.message);\n          }\n        }\n      });\n\n      document.addEventListener("click", async (e) => {\n        const botonEliminar = e.target.closest("[data-detalle-id]");\n        if (!botonEliminar) return;\n\n        if (\n          !confirm(\n            "\xBFEst\xE1s seguro de que quieres eliminar esta caracter\xEDstica del proyecto?"\n          )\n        ) {\n          return;\n        }\n\n        try {\n          const detalleId = botonEliminar.getAttribute("data-detalle-id");\n          const response = await fetch(`/api/detalles?id=${detalleId}`, {\n            method: "DELETE",\n          });\n\n          if (!response.ok) {\n            const error = await response.json();\n            throw new Error(error.error || "Error al eliminar caracter\xEDstica");\n          }\n\n          if (typeof window.mostrarMensaje === "function") {\n            window.mostrarMensaje(\n              "Caracter\xEDstica eliminada correctamente",\n              "success"\n            );\n          }\n\n          setTimeout(() => {\n            window.refrescarDetalles?.();\n          }, 100);\n        } catch (error) {\n          console.error("Error:", error);\n\n          if (typeof window.mostrarMensaje === "function") {\n            window.mostrarMensaje(error.message, "error");\n          } else {\n            alert(error.message);\n          }\n        }\n      });\n    });\n  })();\n  window.cambiarEstadoDetalle = async (id, nuevoEstado) => {\n    const res = await fetch(`/api/detalles/${id}/estado`, {\n      method: "PATCH",\n      headers: { "Content-Type": "application/json" },\n      body: JSON.stringify({ estado: Number(nuevoEstado) }),\n    });\n    if (res.ok) location.reload();\n    else alert("No se pudo cambiar el estado");\n  };\n})();<\/script>'], ["", " <script>(function(){", '\n  (() => {\n    // Funci\xF3n global para refrescar p\xE1gina\n    window.refrescarDetalles = function () {\n      location.reload();\n    };\n\n    // Esperar a que el DOM est\xE9 listo\n    document.addEventListener("DOMContentLoaded", function () {\n      // Buscar el formulario\n      const form = document.querySelector("form[data-add-caracteristica]");\n      if (!form) return;\n\n      const selBox = form.querySelector(\n        \'select[name="caracteristicas_ecommerceid"]\'\n      );\n      if (!selBox) return;\n\n      /* \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 1. Cargar opciones \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 */\n      fetch("/api/caracteristicas?estado=1")\n        .then((r) => r.json())\n        .then((list) => {\n          // Limpiar opciones existentes (excepto la primera)\n          selBox.innerHTML =\n            \'<option value="">-- Seleccionar caracter\xEDstica --</option>\';\n\n          list.forEach((c) => {\n            const opt = document.createElement("option");\n            opt.value = c.id;\n            opt.textContent = c.titulo;\n            selBox.appendChild(opt);\n          });\n        })\n        .catch((err) => {\n          console.error("Error cargando caracter\xEDsticas:", err);\n        });\n\n      /* \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 2. Submit \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 */\n      form.addEventListener("submit", async (e) => {\n        e.preventDefault();\n        const data = Object.fromEntries(new FormData(form));\n\n        let caracId = data.caracteristicas_ecommerceid;\n\n        try {\n          /* 2.1 crea caracter\xEDstica nueva si es necesario */\n          if (!caracId && data.tituloNuevo?.trim()) {\n            const resCar = await fetch("/api/caracteristicas", {\n              method: "POST",\n              headers: { "Content-Type": "application/json" },\n              body: JSON.stringify({\n                titulo: data.tituloNuevo.trim(),\n                descripcion: "",\n              }),\n            });\n\n            if (!resCar.ok) {\n              const error = await resCar.json();\n              throw new Error(error.error || "Error al crear caracter\xEDstica");\n            }\n\n            const nueva = await resCar.json();\n            caracId = nueva.id;\n          }\n\n          if (!caracId) {\n            throw new Error(\n              "Selecciona una caracter\xEDstica existente o escribe el nombre de una nueva"\n            );\n          }\n\n          /* 2.2 enlace proyecto-caracter\xEDstica */\n          const detallePayload = {\n            proyectoId: proyectoId,\n            caracteristicas_ecommerceid: Number(caracId),\n            observacion: data.observacion || "",\n          };\n\n          const resDet = await fetch("/api/detalles", {\n            method: "POST",\n            headers: { "Content-Type": "application/json" },\n            body: JSON.stringify(detallePayload),\n          });\n\n          if (!resDet.ok) {\n            const error = await resDet.json();\n            throw new Error(error.error || "Error al vincular caracter\xEDstica");\n          }\n\n          form.reset();\n\n          setTimeout(() => {\n            window.refrescarDetalles?.();\n          }, 100);\n        } catch (error) {\n          console.error("Error:", error);\n\n          if (typeof window.mostrarMensaje === "function") {\n            window.mostrarMensaje(error.message, "error");\n          } else {\n            alert(error.message);\n          }\n        }\n      });\n\n      document.addEventListener("click", async (e) => {\n        const botonEliminar = e.target.closest("[data-detalle-id]");\n        if (!botonEliminar) return;\n\n        if (\n          !confirm(\n            "\xBFEst\xE1s seguro de que quieres eliminar esta caracter\xEDstica del proyecto?"\n          )\n        ) {\n          return;\n        }\n\n        try {\n          const detalleId = botonEliminar.getAttribute("data-detalle-id");\n          const response = await fetch(\\`/api/detalles?id=\\${detalleId}\\`, {\n            method: "DELETE",\n          });\n\n          if (!response.ok) {\n            const error = await response.json();\n            throw new Error(error.error || "Error al eliminar caracter\xEDstica");\n          }\n\n          if (typeof window.mostrarMensaje === "function") {\n            window.mostrarMensaje(\n              "Caracter\xEDstica eliminada correctamente",\n              "success"\n            );\n          }\n\n          setTimeout(() => {\n            window.refrescarDetalles?.();\n          }, 100);\n        } catch (error) {\n          console.error("Error:", error);\n\n          if (typeof window.mostrarMensaje === "function") {\n            window.mostrarMensaje(error.message, "error");\n          } else {\n            alert(error.message);\n          }\n        }\n      });\n    });\n  })();\n  window.cambiarEstadoDetalle = async (id, nuevoEstado) => {\n    const res = await fetch(\\`/api/detalles/\\${id}/estado\\`, {\n      method: "PATCH",\n      headers: { "Content-Type": "application/json" },\n      body: JSON.stringify({ estado: Number(nuevoEstado) }),\n    });\n    if (res.ok) location.reload();\n    else alert("No se pudo cambiar el estado");\n  };\n})();<\/script>'])), renderComponent($$result, "Layout", $$Layout, { "title": `Proyecto: ${proyecto.nombre_proyecto}` }, { "default": async ($$result2) => renderTemplate` ${maybeRenderHead()}<div class="min-h-screen bg-gray-50"> <div class="max-w-6xl mx-auto px-6 py-8"> <div class="mb-6"> <a${addAttribute(`/clientes/${clienteId}`, "href")} class="text-sm text-gray-600 hover:text-gray-900 flex items-center gap-1"> <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path> </svg>Volver al Proyecto
</a> </div> <header class="info-header w-full flex items-center justify-between mb-8"> <!-- Project Header --> <div class="info-header--text"> <h1 class="text-3xl font-light text-gray-900 tracking-tight"> ${proyecto.nombre_proyecto} </h1> <p class="text-sm text-gray-600 mb-1">
Gestión de proyectos y características
</p> </div> <span${addAttribute(`inline-block px-3 py-1 rounded-full text-xs font-medium ${proyecto.estado ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800"}`, "class")}> ${proyecto.estado ? "Activo" : "Inactivo"} </span> </header> <!-- Add Characteristic Form --> ${renderComponent($$result2, "AddCaracteristicaForm", $$AddCaracteristicaForm, { "proyectoId": proyectoId ?? "", "onSaved": "refrescarDetalles" })} <!-- Characteristics List --> <div class="bg-white border border-gray-200 rounded-lg"> <!-- List Header --> <div class="px-6 py-4 border-b border-gray-200"> <div class="flex items-center justify-between"> <div class="flex items-center gap-3"> <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path> </svg> <h2 class="text-lg font-medium text-gray-900">
Características Asignadas
</h2> </div> <span class="text-sm text-gray-600"> ${proyecto.detalles?.length ?? 0} características
</span> </div> </div> <!-- List Content --> <div class="p-6"> ${(proyecto.detalles?.length ?? 0) === 0 ? renderTemplate`<div class="text-center py-12"> <svg class="w-12 h-12 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 0 012 2"></path> </svg> <p class="text-gray-600 text-sm">
Sin características asignadas
</p> </div>` : renderTemplate`<div class="space-y-4"> ${proyecto.detalles.map((d) => renderTemplate`<div class="flex items-start justify-between p-4 border border-gray-200 rounded-lg hover:bg-gray-50"> <div class="flex items-start gap-3 flex-1"> <svg class="w-5 h-5 text-gray-400 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 0 012 2"></path> </svg> <div class="flex-1 min-w-0"> <h3 class="font-medium text-gray-900 mb-1"> ${d.caracteristica.titulo} </h3> ${d.observacion && renderTemplate`<p class="text-sm text-gray-600">${d.observacion}</p>`} </div> </div> <div class="flex items-center gap-3 flex-shrink-0 ml-4"> <span${addAttribute(`inline-block px-3 py-1 rounded-full text-xs font-medium ${d.estado === 1 ? "bg-gray-100 text-gray-800" : d.estado === 2 ? "bg-yellow-100 text-yellow-800" : "bg-green-100 text-green-800"}`, "class")}> ${d.estado === 1 ? "Por hacer" : d.estado === 2 ? "En progreso" : "Completado"} </span> <select${addAttribute(`cambiarEstadoDetalle(${d.id}, this.value)`, "onchange")} class="text-xs border rounded px-2 py-1"> <option value="1"${addAttribute(d.estado === 1, "selected")}>
Por hacer
</option> <option value="2"${addAttribute(d.estado === 2, "selected")}>
En progreso
</option> <option value="3"${addAttribute(d.estado === 3, "selected")}>
Completado
</option> </select> <button type="button"${addAttribute(d.id, "data-detalle-id")} class="text-gray-400 hover:text-red-600 p-1" title="Eliminar característica"> <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path> </svg> </button> </div> </div>`)} </div>`} </div> </div> </div> </div> ` }), defineScriptVars({ proyectoId }));
}, "C:/Users/Jerick/DEV/AstroJS/doc-ecommerce/src/pages/clientes/[id]/proyectos/[proyectoId].astro", void 0);

const $$file = "C:/Users/Jerick/DEV/AstroJS/doc-ecommerce/src/pages/clientes/[id]/proyectos/[proyectoId].astro";
const $$url = "/clientes/[id]/proyectos/[proyectoId]";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$proyectoId,
  file: $$file,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
