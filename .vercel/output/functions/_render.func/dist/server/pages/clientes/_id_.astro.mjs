/* empty css                                               */
import { c as createAstro, a as createComponent, m as maybeRenderHead, f as addAttribute, e as renderTemplate, d as renderComponent } from '../../chunks/astro/server_BTInrGQy.mjs';
import 'kleur/colors';
import { $ as $$Layout } from '../../chunks/Layout_3tWj6AhR.mjs';
import 'clsx';
import { a as getClienteById, b as getProyectosByCliente } from '../../chunks/clientStore_BLAaA3MI.mjs';
export { renderers } from '../../renderers.mjs';

const $$Astro$2 = createAstro("https://docs.perseo.com");
const $$ProyectoCard = createComponent(($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$2, $$props, $$slots);
  Astro2.self = $$ProyectoCard;
  const { proyecto } = Astro2.props;
  const url = `/clientes/${proyecto.clientesid}/proyectos/${proyecto.id}`;
  return renderTemplate`${maybeRenderHead()}<div class="px-4 py-2"> <div class="flex items-start justify-between"> <a${addAttribute(url, "href")} class="flex-1 min-w-0 hover:underline"> <div class="flex items-center gap-3"> <h3 class="text-lg font-medium text-gray-900"> ${proyecto.nombre_proyecto} </h3> <span${addAttribute(`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${proyecto.estado ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800"}`, "class")}> ${proyecto.estado ? "Activo" : "Inactivo"} </span> </div> ${proyecto.observacion && renderTemplate`<p class="text-sm text-gray-600">${proyecto.observacion}</p>`} </a> <div class="flex items-center gap-2 ml-4"> <button${addAttribute(`toggleProyecto(${proyecto.id}, ${proyecto.estado})`, "onclick")}${addAttribute(`px-3 py-1.5 text-xs font-medium rounded-md transition-colors ${proyecto.estado ? "bg-yellow-100 text-yellow-800 hover:bg-yellow-200" : "bg-green-100 text-green-800 hover:bg-green-200"}`, "class")}> ${proyecto.estado ? "Desactivar" : "Activar"} </button> <button${addAttribute(`eliminarProyecto(${proyecto.id})`, "onclick")} class="px-3 py-1.5 text-xs font-medium text-red-800 bg-red-100 rounded-md hover:bg-red-200 transition-colors">
Eliminar
</button> </div> </div> </div>`;
}, "C:/Users/Jerick/DEV/AstroJS/doc-ecommerce/src/components/ProyectoCard.astro", void 0);

var __freeze$1 = Object.freeze;
var __defProp$1 = Object.defineProperty;
var __template$1 = (cooked, raw) => __freeze$1(__defProp$1(cooked, "raw", { value: __freeze$1(raw || cooked.slice()) }));
var _a$1;
const $$Astro$1 = createAstro("https://docs.perseo.com");
const $$NuevoProyectoForm = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$1, $$props, $$slots);
  Astro2.self = $$NuevoProyectoForm;
  const { clienteId } = Astro2.props;
  return renderTemplate(_a$1 || (_a$1 = __template$1(["", '<form id="nuevoProyectoForm"', ' class="space-y-4"> <input class="w-full border px-3 py-2 rounded" name="nombreProyecto" placeholder="Nombre del proyecto" maxlength="60" required> <textarea class="w-full border px-3 py-2 rounded" name="observacion" placeholder="Observaci\xF3n (opcional)" maxlength="125"></textarea> <button class="inline-flex items-center gap-2 px-4 py-2 bg-gray-900 text-white text-sm font-medium rounded-md hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-colors">\nCrear Proyecto\n</button> </form> <script>\n  const form = document.getElementById("nuevoProyectoForm");\n  const clienteId = parseInt(form.dataset.clienteId);\n\n  form.addEventListener("submit", async (e) => {\n    e.preventDefault();\n\n    const formData = new FormData(form);\n    const data = Object.fromEntries(formData);\n\n    const payload = {\n      clientesid: clienteId,\n      nombreProyecto: data.nombreProyecto,\n      observacion: data.observacion || null,\n    };\n\n    const res = await fetch(`/api/clientes/${clienteId}/proyectos`, {\n      method: "POST",\n      headers: { "Content-Type": "application/json" },\n      body: JSON.stringify(payload),\n    });\n\n    if (res.ok) {\n      form.reset(); // limpiar\n      location.reload(); // o actualiza proyectos din\xE1micamente\n    } else {\n      alert("Error al crear el proyecto");\n    }\n  });\n<\/script>'], ["", '<form id="nuevoProyectoForm"', ' class="space-y-4"> <input class="w-full border px-3 py-2 rounded" name="nombreProyecto" placeholder="Nombre del proyecto" maxlength="60" required> <textarea class="w-full border px-3 py-2 rounded" name="observacion" placeholder="Observaci\xF3n (opcional)" maxlength="125"></textarea> <button class="inline-flex items-center gap-2 px-4 py-2 bg-gray-900 text-white text-sm font-medium rounded-md hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-colors">\nCrear Proyecto\n</button> </form> <script>\n  const form = document.getElementById("nuevoProyectoForm");\n  const clienteId = parseInt(form.dataset.clienteId);\n\n  form.addEventListener("submit", async (e) => {\n    e.preventDefault();\n\n    const formData = new FormData(form);\n    const data = Object.fromEntries(formData);\n\n    const payload = {\n      clientesid: clienteId,\n      nombreProyecto: data.nombreProyecto,\n      observacion: data.observacion || null,\n    };\n\n    const res = await fetch(\\`/api/clientes/\\${clienteId}/proyectos\\`, {\n      method: "POST",\n      headers: { "Content-Type": "application/json" },\n      body: JSON.stringify(payload),\n    });\n\n    if (res.ok) {\n      form.reset(); // limpiar\n      location.reload(); // o actualiza proyectos din\xE1micamente\n    } else {\n      alert("Error al crear el proyecto");\n    }\n  });\n<\/script>'])), maybeRenderHead(), addAttribute(clienteId, "data-cliente-id"));
}, "C:/Users/Jerick/DEV/AstroJS/doc-ecommerce/src/components/NuevoProyectoForm.astro", void 0);

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Astro = createAstro("https://docs.perseo.com");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  const { id } = Astro2.params;
  if (!id) {
    throw new Error("Cliente ID is required");
  }
  const cliente = await getClienteById(id);
  const clienteId = cliente?.id;
  const proyectos = await getProyectosByCliente(id);
  return renderTemplate(_a || (_a = __template(["", ' <script type="module">\n  document\n    .getElementById("nuevoProyectoForm")\n    .addEventListener("submit", async (e) => {\n      e.preventDefault();\n      const formData = new FormData(e.target);\n\n      try {\n        const response = await fetch("/api/proyectos", {\n          method: "POST",\n          headers: { "Content-Type": "application/json" },\n          body: JSON.stringify({\n            clienteId: { clienteId },\n            nombreProyecto: formData.get("nombreProyecto"),\n            observacion: formData.get("observacion"),\n          }),\n        });\n\n        if (response.ok) {\n          location.reload();\n        }\n      } catch (error) {\n        console.error("Error:", error);\n      }\n    });\n\n  // Toggle estado proyecto\n  window.toggleProyecto = async (proyectoId, estadoActual) => {\n    try {\n      const response = await fetch(`/api/proyectos/${proyectoId}/toggle`, {\n        method: "PATCH",\n        headers: { "Content-Type": "application/json" },\n        body: JSON.stringify({ estado: !estadoActual }),\n      });\n\n      if (response.ok) {\n        location.reload();\n      } else {\n        alert("Error al cambiar el estado del proyecto");\n      }\n    } catch (error) {\n      console.error("Error:", error);\n      alert("Error al cambiar el estado del proyecto");\n    }\n  };\n\n  // Eliminar proyecto\n  window.eliminarProyecto = async (proyectoId) => {\n    if (\n      !confirm(\n        "\xBFEst\xE1 seguro de eliminar este proyecto y todas sus caracter\xEDsticas?"\n      )\n    )\n      return;\n\n    try {\n      const response = await fetch(`/api/proyectos/${proyectoId}`, {\n        method: "DELETE",\n      });\n\n      if (response.ok) {\n        location.reload();\n      } else {\n        alert("Error al eliminar el proyecto");\n      }\n    } catch (error) {\n      console.error("Error:", error);\n      alert("Error al eliminar el proyecto");\n    }\n  };\n\n  // Crear caracter\xEDstica\n  window.crearCaracteristica = async (proyectoId) => {\n    const caracteristicaId = prompt("ID de la caracter\xEDstica:");\n    if (!caracteristicaId || isNaN(Number(caracteristicaId))) return;\n\n    const observacion = prompt("Observaci\xF3n (opcional):") || "";\n\n    try {\n      const response = await fetch("/api/detalles", {\n        method: "POST",\n        headers: { "Content-Type": "application/json" },\n        body: JSON.stringify({\n          proyectoId: proyectoId,\n          caracteristicas_ecommerceid: Number(caracteristicaId),\n          observacion: observacion,\n        }),\n      });\n\n      if (response.ok) {\n        location.reload();\n      } else {\n        alert("Error al crear la caracter\xEDstica");\n      }\n    } catch (error) {\n      console.error("Error:", error);\n      alert("Error al crear la caracter\xEDstica");\n    }\n  };\n\n  // Toggle estado detalle\n  window.toggleDetalle = async (detalleId, proyectoId, estadoActual) => {\n    try {\n      const response = await fetch(`/api/detalles/${detalleId}/toggle`, {\n        method: "PATCH",\n        headers: { "Content-Type": "application/json" },\n        body: JSON.stringify({ estado: !estadoActual }),\n      });\n\n      if (response.ok) {\n        location.reload();\n      } else {\n        alert("Error al cambiar el estado de la caracter\xEDstica");\n      }\n    } catch (error) {\n      console.error("Error:", error);\n      alert("Error al cambiar el estado de la caracter\xEDstica");\n    }\n  };\n\n  // Eliminar detalle\n  window.eliminarDetalle = async (detalleId, proyectoId) => {\n    if (!confirm("\xBFEst\xE1 seguro de eliminar esta caracter\xEDstica?")) return;\n\n    try {\n      const response = await fetch(`/api/detalles/${detalleId}`, {\n        method: "DELETE",\n      });\n\n      if (response.ok) {\n        location.reload();\n      } else {\n        alert("Error al eliminar la caracter\xEDstica");\n      }\n    } catch (error) {\n      console.error("Error:", error);\n      alert("Error al eliminar la caracter\xEDstica");\n    }\n  };\n<\/script>'], ["", ' <script type="module">\n  document\n    .getElementById("nuevoProyectoForm")\n    .addEventListener("submit", async (e) => {\n      e.preventDefault();\n      const formData = new FormData(e.target);\n\n      try {\n        const response = await fetch("/api/proyectos", {\n          method: "POST",\n          headers: { "Content-Type": "application/json" },\n          body: JSON.stringify({\n            clienteId: { clienteId },\n            nombreProyecto: formData.get("nombreProyecto"),\n            observacion: formData.get("observacion"),\n          }),\n        });\n\n        if (response.ok) {\n          location.reload();\n        }\n      } catch (error) {\n        console.error("Error:", error);\n      }\n    });\n\n  // Toggle estado proyecto\n  window.toggleProyecto = async (proyectoId, estadoActual) => {\n    try {\n      const response = await fetch(\\`/api/proyectos/\\${proyectoId}/toggle\\`, {\n        method: "PATCH",\n        headers: { "Content-Type": "application/json" },\n        body: JSON.stringify({ estado: !estadoActual }),\n      });\n\n      if (response.ok) {\n        location.reload();\n      } else {\n        alert("Error al cambiar el estado del proyecto");\n      }\n    } catch (error) {\n      console.error("Error:", error);\n      alert("Error al cambiar el estado del proyecto");\n    }\n  };\n\n  // Eliminar proyecto\n  window.eliminarProyecto = async (proyectoId) => {\n    if (\n      !confirm(\n        "\xBFEst\xE1 seguro de eliminar este proyecto y todas sus caracter\xEDsticas?"\n      )\n    )\n      return;\n\n    try {\n      const response = await fetch(\\`/api/proyectos/\\${proyectoId}\\`, {\n        method: "DELETE",\n      });\n\n      if (response.ok) {\n        location.reload();\n      } else {\n        alert("Error al eliminar el proyecto");\n      }\n    } catch (error) {\n      console.error("Error:", error);\n      alert("Error al eliminar el proyecto");\n    }\n  };\n\n  // Crear caracter\xEDstica\n  window.crearCaracteristica = async (proyectoId) => {\n    const caracteristicaId = prompt("ID de la caracter\xEDstica:");\n    if (!caracteristicaId || isNaN(Number(caracteristicaId))) return;\n\n    const observacion = prompt("Observaci\xF3n (opcional):") || "";\n\n    try {\n      const response = await fetch("/api/detalles", {\n        method: "POST",\n        headers: { "Content-Type": "application/json" },\n        body: JSON.stringify({\n          proyectoId: proyectoId,\n          caracteristicas_ecommerceid: Number(caracteristicaId),\n          observacion: observacion,\n        }),\n      });\n\n      if (response.ok) {\n        location.reload();\n      } else {\n        alert("Error al crear la caracter\xEDstica");\n      }\n    } catch (error) {\n      console.error("Error:", error);\n      alert("Error al crear la caracter\xEDstica");\n    }\n  };\n\n  // Toggle estado detalle\n  window.toggleDetalle = async (detalleId, proyectoId, estadoActual) => {\n    try {\n      const response = await fetch(\\`/api/detalles/\\${detalleId}/toggle\\`, {\n        method: "PATCH",\n        headers: { "Content-Type": "application/json" },\n        body: JSON.stringify({ estado: !estadoActual }),\n      });\n\n      if (response.ok) {\n        location.reload();\n      } else {\n        alert("Error al cambiar el estado de la caracter\xEDstica");\n      }\n    } catch (error) {\n      console.error("Error:", error);\n      alert("Error al cambiar el estado de la caracter\xEDstica");\n    }\n  };\n\n  // Eliminar detalle\n  window.eliminarDetalle = async (detalleId, proyectoId) => {\n    if (!confirm("\xBFEst\xE1 seguro de eliminar esta caracter\xEDstica?")) return;\n\n    try {\n      const response = await fetch(\\`/api/detalles/\\${detalleId}\\`, {\n        method: "DELETE",\n      });\n\n      if (response.ok) {\n        location.reload();\n      } else {\n        alert("Error al eliminar la caracter\xEDstica");\n      }\n    } catch (error) {\n      console.error("Error:", error);\n      alert("Error al eliminar la caracter\xEDstica");\n    }\n  };\n<\/script>'])), renderComponent($$result, "Layout", $$Layout, { "title": `Cliente: ${cliente.razon_social}` }, { "default": async ($$result2) => renderTemplate` ${maybeRenderHead()}<div class="min-h-screen bg-gray-50"> <div class="max-w-6xl mx-auto px-6 py-8"> <!-- Header con navegación --> <div class="mb-8"> <a href="/clientes" class="inline-flex items-center gap-2 text-sm text-gray-600 hover:text-gray-900 transition-colors mb-4"> <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path> </svg>
Volver a la lista
</a> <h1 class="text-3xl font-light text-gray-900 tracking-tight"> ${cliente.razon_social} </h1> <p class="text-gray-600 mt-1">Gestión de proyectos y características</p> </div> <div class="grid grid-cols-1 lg:grid-cols-3 gap-8"> <!-- Información del Cliente --> <div class="lg:col-span-1"> <div class="bg-white rounded-lg shadow-sm border border-gray-100 p-9 sticky top-[70px] h-full"> <div class="flex items-center gap-3 mb-4"> <div class="w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center"> <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path> </svg> </div> <div> <h2 class="text-lg font-medium text-gray-900">
Información del Cliente
</h2> <p class="text-sm text-gray-600">Datos principales</p> </div> </div> <div class="space-y-3"> <div> <label class="text-xs font-medium text-gray-500 uppercase tracking-wide">Razón Social</label> <p class="text-sm text-gray-900 mt-1">${cliente.razon_social}</p> </div> <div> <label class="text-xs font-medium text-gray-500 uppercase tracking-wide">RUC</label> <p class="text-sm text-gray-900 mt-1">${cliente.ruc}</p> </div> <div> <label class="text-xs font-medium text-gray-500 uppercase tracking-wide">Proyectos</label> <p class="text-sm text-gray-900 mt-1"> ${proyectos.length} proyecto${proyectos.length !== 1 ? "s" : ""} </p> </div> </div> </div> </div> <!-- Contenido Principal --> <div class="lg:col-span-2 space-y-8"> <!-- Formulario Nuevo Proyecto --> ${renderComponent($$result2, "NuevoProyectoForm", $$NuevoProyectoForm, { "clienteId": clienteId })} <!-- Lista de Proyectos --> <div class="bg-white rounded-lg shadow-sm border border-gray-100"> <div class="px-6 py-4 border-b border-gray-100"> <div class="flex items-center gap-2"> <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path> </svg> <h2 class="text-lg font-medium text-gray-900">Proyectos</h2> </div> <p class="text-sm text-gray-600 mt-1"> ${proyectos.length} proyecto${proyectos.length !== 1 ? "s" : ""} registrado${proyectos.length !== 1 ? "s" : ""} </p> </div> ${proyectos.length === 0 ? renderTemplate`<div class="text-center py-12"> <svg class="w-12 h-12 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path> </svg> <p class="text-gray-500 mb-1">No hay proyectos registrados</p> <p class="text-sm text-gray-400">
Crea tu primer proyecto usando el formulario de arriba
</p> </div>` : renderTemplate`<div class="divide-y divide-gray-100"> ${proyectos.map((proyecto) => renderTemplate`${renderComponent($$result2, "ProyectoCard", $$ProyectoCard, { "proyecto": proyecto })}`)} </div>`} </div> </div> </div> </div> </div> ` }));
}, "C:/Users/Jerick/DEV/AstroJS/doc-ecommerce/src/pages/clientes/[id]/index.astro", void 0);

const $$file = "C:/Users/Jerick/DEV/AstroJS/doc-ecommerce/src/pages/clientes/[id]/index.astro";
const $$url = "/clientes/[id]";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$Index,
  file: $$file,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
