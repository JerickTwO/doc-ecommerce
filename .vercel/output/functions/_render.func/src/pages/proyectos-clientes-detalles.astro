---
import { fetchProyectos } from "../utils/db";

const user = (
  Astro.locals as { user: { sub: string; role: string; ruc: string } }
).user;
if (!user?.sub || user.role !== "cliente") {
  return Astro.redirect("/login-cliente");
}

const proyectos = await fetchProyectos(Number(user.sub));
---

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Mis proyectos</title>
  </head>
  <body class="bg-gray-50 min-h-screen p-6 font-sans">
    <main class="max-w-6xl mx-auto">
      <div class="flex items-start justify-between mb-4 sm:mb-6">
        <div class="flex flex-col">
          <a
            href="/"
            class="inline-flex items-center gap-2 text-sm text-gray-600 hover:text-gray-900 transition-colors mb-2"
          >
            <svg
              class="w-4 h-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M15 19l-7-7 7-7"></path>
            </svg> Volver a la Documentación
          </a>

          <h1 class="text-3xl font-light text-gray-900 tracking-tight">
            RUC: <span class="font-normal text-green-950">{user.ruc}</span>
          </h1>
          <p class="text-gray-600">Administra tu proyectos de forma sencilla</p>
        </div>

        <!-- BOTÓN LOGOUT -->
        <button
          id="logout-btn"
          class="inline-flex gap-1 rounded-md border border-gray-300 bg-white px-3 py-1.5 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="w-4 h-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path>
            <polyline points="16 17 21 12 16 7"></polyline>
            <line x1="21" y1="12" x2="9" y2="12"></line>
          </svg>
          Cerrar sesión
        </button>
      </div>
      {
        proyectos.length === 0 && (
          <p class="text-gray-600">No tienes proyectos aún.</p>
        )
      }

      <div class="grid gap-6">
        {
          proyectos.map((p) => (
            <div class="bg-white shadow-sm border border-gray-200 rounded-xl">
              <header class="flex flex-row items-center space-x-4 justify-between  p-6 pb-4">
                <div class="flex gap-5 items-center">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    class="h-6 w-6 text-gray-500"
                  >
                    <path d="M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z" />
                  </svg>
                  <h3 class="text-xl font-semibold text-gray-800">
                    {p.nombreProyecto}
                  </h3>
                  <p class="text-sm text-gray-500 italic">{p.observacion}</p>
                </div>
                <span
                  class={`ml-auto inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium ${p.estado ? "bg-green-100 text-green-700" : "bg-red-100 text-red-700"}`}
                >
                  {p.estado ? "Activo" : "Inactivo"}
                </span>
              </header>

              <div class="p-6 pt-0">
                {p.detalles.length > 0 ? (
                  <div class="overflow-x-auto">
                    <table class="min-w-full text-sm border-collapse">
                      <thead class="bg-gray-50">
                        <tr>
                          <th class="py-2 px-3 text-left font-medium text-gray-600 w-[50px]">
                            #
                          </th>
                          <th class="py-2 px-3 text-left font-medium text-gray-600">
                            Característica
                          </th>
                          <th class="py-2 px-3 text-left font-medium text-gray-600">
                            Observación
                          </th>
                          <th class="py-2 px-3 text-left font-medium text-gray-600">
                            Estado
                          </th>
                        </tr>
                      </thead>
                      <tbody>
                        {p.detalles.map(
                          (
                            d: {
                              caracteristica: { titulo: unknown };
                              observacion: any;
                              estado: any;
                            },
                            idx: number
                          ) => (
                            <tr class="border-b border-gray-200 last:border-0">
                              <td class="py-2 px-3 font-medium">{idx + 1}</td>
                              <td class="py-2 px-3">
                                {d.caracteristica.titulo}
                              </td>
                              <td class="py-2 px-3 text-gray-500">
                                {d.observacion ?? "-"}
                              </td>
                              <td class="py-2 px-3">
                                <span
                                  class={`inline-block px-3 py-1 rounded-full text-xs font-medium ${
                                    d.estado === 1
                                      ? "bg-gray-100 text-gray-800"
                                      : d.estado === 2
                                        ? "bg-yellow-100 text-yellow-800"
                                        : "bg-green-100 text-green-800"
                                  }`}
                                >
                                  {d.estado === 1
                                    ? "Por hacer"
                                    : d.estado === 2
                                      ? "En progreso"
                                      : "Completado"}
                                </span>
                              </td>
                            </tr>
                          )
                        )}
                      </tbody>
                    </table>
                  </div>
                ) : (
                  <p class="text-gray-500 italic text-sm">
                    No hay detalles registrados para este proyecto.
                  </p>
                )}
              </div>
            </div>
          ))
        }
      </div>
    </main>
    <script is:inline>
      async function handleLogout() {
        try {
          const res = await fetch("/api/auth/logout", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
          });
          const data = await res.json();

          if (data.success) {
            window.location.href = "/caracteristicas";
          } else {
            alert("Error al cerrar sesión");
          }
        } catch (err) {
          console.error("Error al cerrar sesión:", err);
          alert("Error al cerrar sesión");
        }
      }

      document
        .getElementById("logout-btn")
        ?.addEventListener("click", handleLogout);
    </script>
  </body>
</html>
